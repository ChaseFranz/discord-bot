import { 
  ContextMenuCommandBuilder, 
  ApplicationCommandType, 
  EmbedBuilder, 
  UserContextMenuCommandInteraction
} from 'discord.js';
import OpenAI from 'openai';
import { Logger } from 'winston';
import { IBotCommand } from './types/DiscordModels';

interface IDescribeUserCommand extends IBotCommand {
  data: ContextMenuCommandBuilder;
  usage: string;
  execute(
    interaction: UserContextMenuCommandInteraction, 
    conversationHistories: Map<string, any>, 
    openai: OpenAI, 
    logger: Logger, 
    client: any, 
    userSettings: any
  ): Promise<void>;
}

class DescribeUserCommand implements IDescribeUserCommand {
  data: ContextMenuCommandBuilder;
  usage: string;
  
  constructor() {
    this.data = new ContextMenuCommandBuilder()
      .setName('Describe This User')
      .setType(ApplicationCommandType.User);
    this.usage = 'Right-click a user and select "Describe This User" to get a creative description of that user.';
  }

  async execute(
    interaction: UserContextMenuCommandInteraction , 
    conversationHistories: Map<string, any>, 
    openai: any, 
    logger: Logger, 
    client: any, 
    userSettings: any
  ): Promise<void> {

    const targetUser = interaction.targetUser;
    if (!targetUser) {
      await interaction.reply({ content: "Couldn't retrieve the selected user.", ephemeral: true });
    }

    const prompt = `Describe the user with the following details: Username: ${targetUser.username}, Discriminator: ${targetUser.discriminator}. Provide a creative, friendly description that infers personality traits from these details.`;

    const messages = [
      { role: 'system', content: "You are ChatGPT, a creative assistant. Provide a descriptive, friendly summary of a user's profile based solely on the given details." },
      { role: 'user', content: prompt }
    ];

    try {
      const response = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages,
      });
      const reply = response.choices[0].message.content;
      const embed = new EmbedBuilder()
        .setTitle(`Description for ${targetUser.tag}`)
        .setDescription(reply)
        .setColor(0x0099ff)
        .setFooter({ text: 'Generated by ChatGPT' });

      await interaction.editReply({ embeds: [embed] });
      logger.info(`Described user ${targetUser.tag} for ${interaction.user.tag}`);
    } catch (error) {
      logger.error(`Error describing user: ${error}`);
      await interaction.editReply({ content: 'Sorry, an error occurred while describing the user.' });
    }
  }
}

export default new DescribeUserCommand();
